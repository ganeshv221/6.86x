Convolution Neural Network
--------------------------
Triangular function
-------------------
Area = 0.5*b*h=0.5*2*1=1
Rectangular function
--------------------
Area = b*h=1*1=1
Convolution: 1D Case
--------------------
f  = [ 1, 3,-1, 1,-3]
g' = [ 1, 0,-1]
h  = f*g 

   = [ 1, 0,-1]
   = [ 1, 3,-1, 1,-3]
   = [2] 

   =    [ 1, 0,-1]
   = [ 1, 3,-1, 1,-3]
   = [2] 

   =       [ 1, 0,-1]
   = [ 1, 3,-1, 1,-3]
   = [2] 

h = [2,2,2]
size = n-f+1 = 5-3+1 = 3

h  = f*g 
   = [ 0, 1, 0,-1, 0]
   =    [ 0, 1, 3,-1, 1,-3, 0]
   = [-3] 

   = [ 0, 1, 0,-1, 0]
   = [ 0, 1, 3,-1, 1,-3, 0]
   = [2] 

   =    [ 0, 1, 0,-1, 0]
   = [ 0, 1, 3,-1, 1,-3, 0]
   = [2]

   =       [ 0, 1, 0,-1, 0]
   = [ 0, 1, 3,-1, 1,-3, 0]
   = [2]

   =          [ 0, 1, 0,-1, 0]
   = [ 0, 1, 3,-1, 1,-3, 0]
   = [1]
   
h  = [-3,2,2,2,1]
size = n+2p-f+1 = 5+2*1-3+1 = 5

Test example
------------
f  = [ 0, 1, 2, 3, 0]
g' = [ 0, 2, 1, 0]

h  = [ 0, 1, 2, 0]
        [ 0, 1, 2, 3, 0]
   = [2]

h  = [ 0, 1, 2, 0]
     [ 0, 1, 2, 3, 0]
   = [5]
h  =    [ 0, 1, 2, 0]
     [ 0, 1, 2, 3, 0]
   = [8]
h  =       [ 0, 1, 2, 0]
     [ 0, 1, 2, 3, 0]
   = [3]

size = n+2p-f+1 = 3+2*1-2+1 = 4

Convolution: 2D Case
--------------------

f = [1 2 1]
    [2 1 1]
    [1 1 1]

g'= [  1 0.5]
    [0.5   1]

size = n-f+1 = 3-2+1 = 2

1   2.5 3   
3.5 
2.5 2.5 
2.5 1.5 1

h  = [4 4]
     [4 3]